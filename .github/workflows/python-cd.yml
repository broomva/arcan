# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: python-cd

on:
  repository_dispatch:
    types: [python-cd] # trigger when release is created
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'CD Tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run CD'
        type: environment
        required: true
      package_version:
        description: 'Package version to deploy (leave empty for latest)'
        required: false
        type: string

permissions:
  contents: read
  packages: write
  id-token: write  # For OIDC PyPI publishing

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [[ -n "${{ github.event.client_payload.version }}" ]]; then
          echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
        elif [[ -n "${{ github.event.inputs.package_version }}" ]]; then
          echo "version=${{ github.event.inputs.package_version }}" >> $GITHUB_OUTPUT
        else
          # Extract version from pyproject.toml
          VERSION=$(grep -E "^version = " packages/arcan/pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Check if should deploy
      id: check
      run: |
        # Check if version already exists on PyPI
        if pip index versions arcan 2>/dev/null | grep -q "${{ steps.version.outputs.version }}"; then
          echo "Version ${{ steps.version.outputs.version }} already exists on PyPI"
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        else
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        fi

  build-and-test:
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: 1.2.2
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "packages/arcan/pyproject.toml"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: |
        uv python install ${{ matrix.python-version }}
        uv python pin ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        bun install
        cd packages/arcan
        uv sync --all-extras
    
    - name: Run integration tests
      run: |
        cd packages/arcan
        uv run pytest tests/integration -v --tb=short
      continue-on-error: false
    
    - name: Build package
      run: |
        cd packages/arcan
        uv build
    
    - name: Validate package
      run: |
        cd packages/arcan
        uv run twine check dist/*
        # Test installation in clean environment
        cd /tmp
        uv venv test_env
        source test_env/bin/activate
        uv pip install ${{ github.workspace }}/packages/arcan/dist/*.whl
        python -c "import arcan; print(f'Successfully imported arcan {arcan.__version__}')"
        deactivate
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-${{ matrix.python-version }}
        path: packages/arcan/dist/
        retention-days: 7

  deploy-test-pypi:
    needs: [validate, build-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-3.12
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true
    
    - name: Test installation from Test PyPI
      run: |
        sleep 30  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ arcan==${{ needs.validate.outputs.version }}
        python -c "import arcan; print(f'Successfully installed arcan {arcan.__version__} from Test PyPI')"

  deploy-pypi:
    needs: [validate, build-and-test, deploy-test-pypi]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-3.12
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true
    
    - name: Verify deployment
      run: |
        sleep 60  # Wait for package to be available
        pip install arcan==${{ needs.validate.outputs.version }}
        python -c "import arcan; print(f'Successfully deployed arcan {arcan.__version__} to PyPI')"

  deploy-docker:
    needs: [validate, deploy-pypi]
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.environment == 'production'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: packages/arcan
        file: packages/arcan/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/arcan:${{ needs.validate.outputs.version }}
          ghcr.io/${{ github.repository }}/arcan:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.validate.outputs.version }}

  post-deploy:
    needs: [validate, deploy-pypi]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: |
          Arcan ${{ needs.validate.outputs.version }} deployment ${{ job.status }}
          PyPI: https://pypi.org/project/arcan/${{ needs.validate.outputs.version }}/
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      continue-on-error: true
    
    - name: Create deployment record
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            task: 'deploy:pypi',
            environment: 'production',
            description: `Deploy arcan ${{ needs.validate.outputs.version }} to PyPI`,
            auto_merge: false,
            required_contexts: [],
            payload: {
              version: '${{ needs.validate.outputs.version }}',
              package: 'arcan'
            }
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: '${{ job.status }}',
            environment_url: 'https://pypi.org/project/arcan/${{ needs.validate.outputs.version }}/',
            description: 'Deployment completed'
          });