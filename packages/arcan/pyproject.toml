[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "arcan"
version = "0.1.0"
description = "Arcan - A powerful spellbook for modern development"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Broomva", email = "carlos@broomva.tech"},
]
keywords = ["arcan", "spellbook", "development", "tools"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.0",
    "fastapi>=0.100.0",
    "httpx>=0.24.0",
    "rich>=13.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.5",
    "pre-commit>=3.0",
    "ipython>=8.0",
    "twine>=4.0",
    "build>=1.0",
]
test = [
    "pytest>=7.4",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.3",
    "pytest-mock>=3.11",
    "pytest-watch>=4.2",
    "hypothesis>=6.0",
]
docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocstrings[python]>=0.22",
]

[project.urls]
Homepage = "https://github.com/broomva/arcan"
Documentation = "https://arcan.broomva.tech"
Repository = "https://github.com/broomva/arcan"
Issues = "https://github.com/broomva/arcan/issues"

[project.scripts]
arcan = "arcan.cli:app"

[tool.hatch.version]
path = "arcan/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/arcan",
    "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["arcan"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "NPY",  # NumPy-specific rules
    "RUF",  # Ruff-specific rules
]
ignore = [
    "ANN401",  # Dynamically typed expressions (typing.Any)
    "S101",    # Use of assert detected
    "PLR0913", # Too many arguments
    "FBT001",  # Boolean positional argument
    "FBT002",  # Boolean default argument
    "RSE102",  # Unnecessary parentheses on raised exception
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN", "ARG", "PLR2004", "S603"]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=arcan",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
branch = true
source = ["arcan"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
